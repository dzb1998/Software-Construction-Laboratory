Zhubo Deng 605186231 CS 35L Lec 8

Exercise 1.1: Moving around in Emacs
1. Use Emacs to edit the file exer1.html.
   e m a c s SP e x e r 1 . h t m l Enter

2. Move the cursor to just after the first occurrence of the word "HTML" (all upper-case).
   C-s H T M L Enter

3. Now move the cursor to the start of the first later occurrence of the word "scavenger".
   C-s s c a v e n g e r Enter

4. Now move the cursor to the start of the first later occurrence of the word "self-referential".
   C-s s e l f - r e f e r e n t i a l Enter

5. Now move the cursor to the start of the first later occurrence of the word "arrow".
   C-s a r r o w Enter

6. Now move the cursor to the end of the current line.
   C-e

7. Now move the cursor to the beginning of the current line.
   C-a

8. Doing the above tasks with the arrow keys takes many keystrokes, or it involves holding down keys 
   for a long time. Can you think of a way to do it with fewer keystrokes by using some of the commands 
   available in Emacs?
   Using C-s for forward searching, C-r for backward searching, C-a go to the beginning of the line, C-e go to
   the end of the line, instead of holding down keys for a long time.

9. Did you move the cursor using the arrow keys? If so, repeat the above steps, without using the arrow keys.
   No.

10.When you are done, exit Emacs.
   C-x C-c





Exercise 1.2: Deleting text in Emacs
1. Use Emacs to edit the file exer2.html. The idea is to delete its HTML comments; the resulting 
   page should display the same text as the original.
   e m a c s SP e x e r 2 . h t m l Enter

2. Delete the 18th line, which is an HTML comment. <!-- HTML comments look like this. -->
   M-g M-g 1 8 Enter C-k 

3. Delete the HTML comment containing the text "DELETE-ME DELETE-ME DELETE-ME".
   C-s D E L E T E - M E Enter C-a C-k 
   
4. Delete the HTML comment containing the text "https://en.wikipedia.org/wiki/HTML_comment#Comments".
   C-s < ! - - Enter C-s w i k i Enter C-a C-p C-k C-n C-k C-n C-k 

5. There are three more HTML comments; delete them too.
   C-s < ! - - Enter C-b C-b C-b C-b C-u 7 C-d 
   C-s < ! - - Enter C-a C-k C-n C-k C-n C-k C-n C-k 
   C-s < ! - - Enter C-a C-k

6. Save and Exit
   C-x C-c y
   To save diff in a .diff file: diff -u exer1.html exer2.html >exer2.diff





Exercise 1.3: Inserting text in Emacs
1. Use Emacs to edit the file exer3.html.
   e m a c s SP e x e r 2 . h t m l Enter

2. Change the first two instances of "Assignment 1" to "Assignment 42".
   C-s A s s i g n m e n t Space 1 Enter Backspace 4 2
   C-s A s s i g n m e n t Space 1 Enter Backspace 4 2
   
3. Change the first instance of "UTF-8" to "US-ASCII".
   C-s U T F - 8 Enter C-b C-b C-b C-b C-b C-u 5 C-d U S - A S C I I 

4. Ooops! The file is not ASCII so you need to fix that. Remove every line containing a non-ASCII character. 
   You can find the next non-ASCII character by searching for the regular expression [^[:ascii:]].
   C-M-s [ ^ [ : a s c i i : ] ] Enter C-a C-k
   
5. Insert an empty line after the first line containing "</ol>".
   C-s < / o l > Enter Enter
   
6. When you finish, save the text file and exit Emacs. As before, use the diff command to check your work.
   C-x C-c y
   To save diff in a .diff file: diff -u e x e r 1 . h t m l space e x e r 3 . h t m l space > e x e r 3 . d i f f 





Exercise 1.4: Other editing tasks in Emacs
In addition to inserting and deleting text, there are other common tasks that you should know, like copy and paste, 
search and replace, and undo.

1. Execute the command "cat exer2.html exer2.diff >exer4.html" to create a file exer4.html that contains 
   a copy of exer2.html followed by a copy of exer2.diff.
   Create a file: cat exer2.html exer2.diff >exer4.html

2. Use Emacs to edit the file exer4.html. The idea is to edit the file so that it looks identical to exer1.html 
   on a browser, but the file itself is a little bit different internally.
   e m a c s SP e x e r 4 . h t m l Enter

3. Go to the end of the file. Copy the new lines in the last chunk of diff output, and paste them into the 
   correct location earlier in the file.
   M-> C-r < ! — - Enter C-@ C-e M-w 
   C-r < / a d d r e s s > Enter C-n C-y
   
4. Repeat the process, until the earlier part of the file is identical to what was in the original.
   M-> C-r < ! — - Enter C-r < ! — - Enter C-@ C-n C-n C-n C-f C-f C-f M-w 
   C-r < a d d r e s s > Enter C-p C-p C-p C-p C-p C-p C-y
   
   M-> C-r < ! — - Enter C-r < ! — - Enter C-r < ! — - Enter C-@ C-f C-f C-f C-f C-f C-f C-f M-w
   C-r < / p > Enter C-r < / p > Enter C-r < / p > Enter C-y
   
   M-> C-r w i k i Enter C-a C-p C-f C-@ C-n C-n C-n C-b C-b M-w
   C-r < h 2 > S u b m i t Enter C-r < h 2 > S u b m i t Enter C-n C-y
   
   M-> C-r D E L Enter C-a C-f C-@ C-e M-w
   C-r < h 2 > H o m e w o r k Enter C-r < h 2 > H o m e w o r k Enter C-n C-y

   M-> C-r d i f f Enter C-a C-f C-@ C-e M-w
   C-r < h 2 > L a b Enter C-r < h 2 > L a b Enter C-n C-y
   
5. Delete the last part of the file, which contains the diff output.
   C-s - - - SP ex Enter C-a C-@ M-> Backspace
   
6. … except we didn't really want to do that, so undo the deletion.
   C-x u
   
7. Turn the diff output into a comment, by surrounding it with "<!--" and "-->".
   C-r - - - SP e x Enter < ! - - Enter M-> - - > Enter
   
8. Now let's try some search and replaces. Search the text document for the pattern "<ol>". How many instances 
   did you find? Use the search and replace function to replace them all with the final-caps equivalent "<oL>".
   M-< M-% < o l > Enter < o L > Enter y y y y y y y 
   Total: 7 occurrences replaced
   
9. Check your work with viewing exer4.html with an HTML browser, and by running the shell command 
   "diff -u exer1.html exer4.html >exer4.diff". The only differences should be changes from "<ol>" to "<oL>", 
   and a long HTML comment at the end.
   C-x C-c y
   Check diff: diff -u exer1.html exer4.html >exer4.diff





Exercise 1.5: Doing commands in Emacs
Do these tasks all within Emacs. Don't use a shell subcommand if you can avoid it.

1. Create a new directory named "junk" that's right under your home directory.
   e m a c s Enter M-x m k d i r Enter j u n k Enter
   
2. In that directory, create a C source file hello.c that contains the following text. Take care to get the 
   text exactly right, with no trailing spaces or empty lines, with the initial # in the leftmost column of 
   the first line, and with all other lines indented to match exactly as shown:
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

   C-x C-f / j u n k / h e l l o . c Enter 
   (Then copy the source code from the homework webpage)

3. Compile this file, using the Emacs M-x compile command.
   M-x c o m p i l e Enter 
   Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace (delete make -k )
   g c c SP h e l l o . c Enter

4. Run the compiled program, and put its output into a new Emacs buffer named hello-out.
   C-x C-w h e l l o . o u t 
   
5. Copy this buffer's contents directly into the log that you're maintaining for this exercise. (You are 
   using Emacs to maintain the log, aren't you?)
   emacs h e l l o - o u t Enter
   C-@ M-> M-w C-x C-f k e y 1 . t x t Enter M-> C-y

#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char\
 const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Yes, I am using Emacs to maintain the log.





Exercise 1.6: Running Elisp code
1. Visit Emacs's *scratch* buffer.
   e m a c s C-x b Enter
   
2. In the buffer, seed the random number generator with your student ID as a string, dashes included. 
   For example, if your student ID is 123-456-789, evaluate (random "123-456-789"). Use C-j (eval-print-last-sexp) 
   to evaluate the expression, and record the result that you get.
   ( r a n d o m SP “ 6 0 5 - 1 8 6 - 2 3 1 ” ) C-j 
   I got -1422141701845467528
   
3. In the buffer, assign two random integers to the global variables x and y. Start by executing 
   (setq x (random)). Again, use C-j.
   ( s e t q SP x SP ( r a n d o m ) ) C-j
   I got 1947722223374617767
   ( s e t q SP y SP ( r a n d o m ) ) C-j
   I got 1019972907648379077
   
4. What is the product of the two variables? You can find this out by evaluating (* x y). What do you observe 
   about the result? If the answer is the correct mathematical answer, keep trying again with a different pair 
   of random integers until you get an answer that is not mathematically correct.
   (* SP x SP y)
   I got -1018235866472885117, which is correct since it is negative.
      
5. Try evaluating (* x y) again, but this time with M-: (eval-expression). What difference do you observe in the output?
   M-: (* SP x SP y) Enter
   I got -1018235866472885117 (#o307363775772124452203, #x31de7fdfd1525483)
   The number part is the same as part 4.
   
6. Are the two random integers truly random in the mathematical sense? If not, what's not random about them?
   They are not truly random. As stated in Emacs documentation, it is a pseudo-random number generated in a deterministic 
   fashion, so they are not truly random, but they have certain properties that mimic a random series.
   
7. Assuming (random) is truly random, what is the probability that the two-variable product mentioned above is 
   mathematically incorrect? Explain how you calculated this.
   Let x be [-2^29, 2^29-1], then y must be out of the range, y < -2^29 or y > 2^29-1
   So (* x y) must be (2^58+2^29, 2^58-1), and the possibility is 1/(2^58)
   
   
   
   
   



